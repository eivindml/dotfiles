/* jshint newcap:false */
function VNode() {}

VNode.prototype = {
    bf_: function (finalChildCount) {
        this.bq_ = finalChildCount;
        this.br_ = 0;
        this.bj_ = null;
        this.bs_ = null;
        this.bg_ = null;
        this.bh_ = null;
    },

    _a_: null,

    get as_() {
        var firstChild = this.bj_;

        if (firstChild && firstChild.bi_) {
            var nestedFirstChild = firstChild.as_;
            // The first child is a DocumentFragment node.
            // If the DocumentFragment node has a first child then we will return that.
            // Otherwise, the DocumentFragment node is not *really* the first child and
            // we need to skip to its next sibling
            return nestedFirstChild || firstChild.aq_;
        }

        return firstChild;
    },

    get aq_() {
        var nextSibling = this.bh_;

        if (nextSibling) {
            if (nextSibling.bi_) {
                var firstChild = nextSibling.as_;
                return firstChild || nextSibling.aq_;
            }
        } else {
            var parentNode = this.bg_;
            if (parentNode && parentNode.bi_) {
                return parentNode.aq_;
            }
        }

        return nextSibling;
    },

    aW_: function (child) {
        this.br_++;

        if (this.bn_ === true) {
            if (child.bt_) {
                var childValue = child.av_;
                this.bm_ = (this.bm_ || '') + childValue;
            } else {
                throw TypeError();
            }
        } else {
            var lastChild = this.bs_;

            child.bg_ = this;

            if (lastChild) {
                lastChild.bh_ = child;
            } else {
                this.bj_ = child;
            }

            this.bs_ = child;
        }

        return child;
    },

    bo_: function finishChild() {
        if (this.br_ === this.bq_ && this.bg_) {
            return this.bg_.bo_();
        } else {
            return this;
        }
    }

    // ,toJSON: function() {
    //     var clone = Object.assign({
    //         nodeType: this.nodeType
    //     }, this);
    //
    //     for (var k in clone) {
    //         if (k.startsWith('_')) {
    //             delete clone[k];
    //         }
    //     }
    //     delete clone._nextSibling;
    //     delete clone._lastChild;
    //     delete clone.parentNode;
    //     return clone;
    // }
};

module.exports = VNode;