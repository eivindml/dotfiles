var EventEmitter = require('events-light');
var vdom = require('./vdom');
var VElement = vdom.ak_;
var VDocumentFragment = vdom.aF_;
var VComment = vdom.aG_;
var VText = vdom.aH_;
var VComponent = vdom.aI_;
var virtualizeHTML = vdom.aJ_;
var RenderResult = require('../RenderResult');
var defaultDocument = vdom.aK_;
var morphdom = require('../../morphdom');

var EVENT_UPDATE = 'update';
var EVENT_FINISH = 'finish';

function State(tree) {

    this.aL_ = new EventEmitter();
    this.aM_ = tree;
    this.aN_ = false;
}

function AsyncVDOMBuilder(globalData, parentNode, parentOut) {
    if (!parentNode) {
        parentNode = new VDocumentFragment();
    }

    var state;

    if (parentOut) {
        state = parentOut.g_;
    } else {
        state = new State(parentNode);
    }

    this.aO_ = 1;
    this.aP_ = 0;
    this.aQ_ = null;
    this.aR_ = parentOut;

    this.data = {};
    this.g_ = state;
    this.ac_ = parentNode;
    this.global = globalData || {};
    this.aS_ = [parentNode];
    this.aT_ = false;
    this.aU_ = undefined;
    this._r_ = null;

    this._Y_ = null;
    this.a__ = null;
    this._Z_ = null;
}

var proto = AsyncVDOMBuilder.prototype = {
    aB_: true,
    v_: defaultDocument,

    bc: function (component) {
        var vComponent = new VComponent(component);
        return this.aV_(vComponent, 0, true);
    },

    ab_: function (component) {
        var vComponent = new VComponent(component, true);
        this.aV_(vComponent, 0);
    },

    aV_: function (child, childCount, pushToStack) {
        this.ac_.aW_(child);
        if (pushToStack === true) {
            this.aS_.push(child);
            this.ac_ = child;
        }
        return childCount === 0 ? this : child;
    },

    element: function (tagName, attrs, key, component, childCount, flags, props) {
        var element = new VElement(tagName, attrs, key, component, childCount, flags, props);
        return this.aV_(element, childCount);
    },

    aX_: function (tagName, attrs, key, component, childCount, flags, props) {
        var element = VElement.aY_(tagName, attrs, key, component, childCount, flags, props);
        return this.aV_(element, childCount);
    },

    n: function (node, component) {
        // NOTE: We do a shallow clone since we assume the node is being reused
        //       and a node can only have one parent node.
        var clone = node.aZ_();
        this.node(clone);
        clone._a_ = component;

        return this;
    },

    node: function (node) {
        this.ac_.aW_(node);
        return this;
    },

    text: function (text) {
        var type = typeof text;

        if (type != 'string') {
            if (text == null) {
                return;
            } else if (type === 'object') {
                if (text.toHTML) {
                    return this.h(text.toHTML());
                }
            }

            text = text.toString();
        }

        this.ac_.aW_(new VText(text));
        return this;
    },

    comment: function (comment) {
        return this.node(new VComment(comment));
    },

    html: function (html) {
        if (html != null) {
            var vdomNode = virtualizeHTML(html, this.v_ || document);
            this.node(vdomNode);
        }

        return this;
    },

    beginElement: function (tagName, attrs, key, component, childCount, flags, props) {
        var element = new VElement(tagName, attrs, key, component, childCount, flags, props);
        this.aV_(element, childCount, true);
        return this;
    },

    b__: function (tagName, attrs, key, component, childCount, flags, props) {
        var element = VElement.aY_(tagName, attrs, key, component, childCount, flags, props);
        this.aV_(element, childCount, true);
        return this;
    },

    endElement: function () {
        var stack = this.aS_;
        stack.pop();
        this.ac_ = stack[stack.length - 1];
    },

    end: function () {
        this.ac_ = undefined;

        var remaining = --this.aO_;
        var parentOut = this.aR_;

        if (remaining === 0) {
            if (parentOut) {
                parentOut.ba_();
            } else {
                this.bb_();
            }
        } else if (remaining - this.aP_ === 0) {
            this.bc_();
        }

        return this;
    },

    ba_: function () {
        var remaining = --this.aO_;

        if (remaining === 0) {
            var parentOut = this.aR_;
            if (parentOut) {
                parentOut.ba_();
            } else {
                this.bb_();
            }
        } else if (remaining - this.aP_ === 0) {
            this.bc_();
        }
    },

    bb_: function () {
        var state = this.g_;
        state.aN_ = true;
        state.aL_.emit(EVENT_FINISH, this.aC_());
    },

    bc_: function () {
        var lastArray = this._last;

        var i = 0;

        function next() {
            if (i === lastArray.length) {
                return;
            }
            var lastCallback = lastArray[i++];
            lastCallback(next);

            if (!lastCallback.length) {
                next();
            }
        }

        next();
    },

    error: function (e) {
        try {
            this.emit('error', e);
        } finally {
            // If there is no listener for the error event then it will
            // throw a new Error here. In order to ensure that the async fragment
            // is still properly ended we need to put the end() in a `finally`
            // block
            this.end();
        }

        return this;
    },

    beginAsync: function (options) {
        if (this.aT_) {
            throw Error('Tried to render async while in sync mode. Note: Client side await is not currently supported in re-renders (Issue: #942).');
        }

        var state = this.g_;

        if (options) {
            if (options.last) {
                this.aP_++;
            }
        }

        this.aO_++;

        var documentFragment = this.ac_.bd_();
        var asyncOut = new AsyncVDOMBuilder(this.global, documentFragment, this);

        state.aL_.emit('beginAsync', {
            out: asyncOut,
            parentOut: this
        });

        return asyncOut;
    },

    createOut: function () {
        return new AsyncVDOMBuilder(this.global);
    },

    flush: function () {
        var events = this.g_.aL_;

        if (events.listenerCount(EVENT_UPDATE)) {
            events.emit(EVENT_UPDATE, new RenderResult(this));
        }
    },

    S_: function () {
        return this.g_.aM_;
    },

    aC_: function () {
        return this.be_ || (this.be_ = new RenderResult(this));
    },

    on: function (event, callback) {
        var state = this.g_;

        if (event === EVENT_FINISH && state.aN_) {
            callback(this.aC_());
        } else if (event === 'last') {
            this.onLast(callback);
        } else {
            state.aL_.on(event, callback);
        }

        return this;
    },

    once: function (event, callback) {
        var state = this.g_;

        if (event === EVENT_FINISH && state.aN_) {
            callback(this.aC_());
        } else if (event === 'last') {
            this.onLast(callback);
        } else {
            state.aL_.once(event, callback);
        }

        return this;
    },

    emit: function (type, arg) {
        var events = this.g_.aL_;
        switch (arguments.length) {
            case 1:
                events.emit(type);
                break;
            case 2:
                events.emit(type, arg);
                break;
            default:
                events.emit.apply(events, arguments);
                break;
        }
        return this;
    },

    removeListener: function () {
        var events = this.g_.aL_;
        events.removeListener.apply(events, arguments);
        return this;
    },

    sync: function () {
        this.aT_ = true;
    },

    isSync: function () {
        return this.aT_;
    },

    onLast: function (callback) {
        var lastArray = this._last;

        if (lastArray === undefined) {
            this._last = [callback];
        } else {
            lastArray.push(callback);
        }

        return this;
    },

    az_: function (doc) {
        var node = this.aU_;
        if (!node) {
            var vdomTree = this.S_();
            // Create the root document fragment node
            doc = doc || this.v_ || document;
            this.aU_ = node = vdomTree.ao_(doc);
            morphdom(node, null, null, vdomTree, doc, this._r_);
        }
        return node;
    },

    toString: function (doc) {
        var docFragment = this.az_(doc);
        var html = '';

        var child = docFragment.firstChild;
        while (child) {
            var nextSibling = child.nextSibling;
            if (child.nodeType != 1) {
                var container = docFragment.ownerDocument.createElement('div');
                container.appendChild(child.cloneNode());
                html += container.innerHTML;
            } else {
                html += child.outerHTML;
            }

            child = nextSibling;
        }

        return html;
    },

    then: function (fn, fnErr) {
        var out = this;
        var promise = new Promise(function (resolve, reject) {
            out.on('error', reject).on(EVENT_FINISH, function (result) {
                resolve(result);
            });
        });

        return Promise.resolve(promise).then(fn, fnErr);
    },

    catch: function (fnErr) {
        return this.then(undefined, fnErr);
    },

    isVDOM: true,

    c: function (componentDef, key, customEvents) {
        this._Y_ = componentDef;
        this.a__ = key;
        this._Z_ = customEvents;
    }
};

proto.e = proto.element;
proto.ed = proto.aX_;
proto.be = proto.beginElement;
proto.bed = proto.b__;
proto.ee = proto.endElement;
proto.t = proto.text;
proto.h = proto.w = proto.write = proto.html;

module.exports = AsyncVDOMBuilder;