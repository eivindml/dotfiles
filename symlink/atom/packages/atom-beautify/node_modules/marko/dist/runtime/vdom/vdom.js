var VNode = require('./VNode');
var VComment = require('./VComment');
var VDocumentFragment = require('./VDocumentFragment');
var VElement = require('./VElement');
var VText = require('./VText');
var VComponent = require('./VComponent');

var defaultDocument = typeof document != 'undefined' && document;
var specialHtmlRegexp = /[&<]/;

function virtualizeChildNodes(node, vdomParent) {
    var curChild = node.firstChild;
    while (curChild) {
        vdomParent.aW_(virtualize(curChild));
        curChild = curChild.nextSibling;
    }
}

function virtualize(node, shallow) {
    switch (node.nodeType) {
        case 1:
            return VElement.al_(node, virtualizeChildNodes);
        case 3:
            return new VText(node.nodeValue);
        case 8:
            return new VComment(node.nodeValue);
        case 11:
            var vdomDocFragment = new VDocumentFragment();
            virtualizeChildNodes(node, vdomDocFragment);
            return vdomDocFragment;
    }
}

function virtualizeHTML(html, doc) {
    if (!specialHtmlRegexp.test(html)) {
        return new VText(html);
    }

    var container = doc.createElement('body');
    container.innerHTML = html;
    var vdomFragment = new VDocumentFragment();

    var curChild = container.firstChild;
    while (curChild) {
        vdomFragment.aW_(virtualize(curChild));
        curChild = curChild.nextSibling;
    }

    return vdomFragment;
}

var Node_prototype = VNode.prototype;

/**
 * Shorthand method for creating and appending a Text node with a given value
 * @param  {String} value The text value for the new Text node
 */
Node_prototype.t = function (value) {
    var type = typeof value;
    var vdomNode;

    if (type !== 'string') {
        if (value == null) {
            value = '';
        } else if (type === 'object') {
            if (value.toHTML) {
                vdomNode = virtualizeHTML(value.toHTML(), document);
            }
        }
    }

    this.aW_(vdomNode || new VText(value.toString()));
    return this.bo_();
};

/**
 * Shorthand method for creating and appending a Comment node with a given value
 * @param  {String} value The value for the new Comment node
 */
Node_prototype.c = function (value) {
    this.aW_(new VComment(value));
    return this.bo_();
};

Node_prototype.bd_ = function () {
    return this.aW_(new VDocumentFragment());
};

exports.aG_ = VComment;
exports.aF_ = VDocumentFragment;
exports.ak_ = VElement;
exports.aH_ = VText;
exports.aI_ = VComponent;
exports.al_ = virtualize;
exports.aJ_ = virtualizeHTML;
exports.aK_ = defaultDocument;